# Cheat Sheet: Python Data Structures Part-2

## Dictionaries

| **Package/Method**   | **Description**                                                                                              | **Code Example**                                                                                               |
|----------------------|--------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| **Creating a Dictionary** | A dictionary is a built-in data type that represents a collection of key-value pairs. Dictionaries are enclosed in curly braces `{}`. | ```python\n dict_name = {} # Creates an empty dictionary\n person = { "name": "John", "age": 30, "city": "New York" }``` |
| **Accessing Values**  | You can access the values in a dictionary using their corresponding keys.                                    | ```python\n value = dict_name["key_name"] \n# Example:\n name = person["name"]\n age = person["age"] ```        |
| **Add or Modify**     | Inserts a new key-value pair into the dictionary or updates an existing one if the key already exists.        | ```python\n dict_name[key] = value\n# Example:\n person["Country"] = "USA"\n person["city"] = "Chicago" ```    |
| **del**              | Removes the specified key-value pair from the dictionary. Raises a `KeyError` if the key does not exist.      | ```python\n del dict_name[key] \n# Example:\n del person["Country"] ```                                         |
| **update()**         | Merges the provided dictionary into the existing dictionary, adding or updating key-value pairs.              | ```python\n dict_name.update({key: value})\n# Example:\n person.update({"Profession": "Doctor"}) ```            |
| **clear()**          | Empties the dictionary, removing all key-value pairs.                                                        | ```python\n dict_name.clear()\n# Example:\n grades.clear() ```                                                 |
| **Key Existence**     | You can check for the existence of a key using the `in` keyword.                                             | ```python\n if "name" in person:\n print("Name exists in the dictionary.") ```                                 |
| **copy()**           | Creates a shallow copy of the dictionary.                                                                    | ```python\n new_dict = dict_name.copy()\n# Example:\n new_person = person.copy()\n new_person = dict(person) ```|
| **keys()**           | Retrieves all keys from the dictionary and converts them into a list.                                        | ```python\n keys_list = list(dict_name.keys())\n# Example:\n person_keys = list(person.keys()) ```             |
| **values()**         | Extracts all values from the dictionary and converts them into a list.                                       | ```python\n values_list = list(dict_name.values())\n# Example:\n person_values = list(person.values()) ```      |
| **items()**          | Retrieves all key-value pairs as tuples and converts them into a list of tuples.                             | ```python\n items_list = list(dict_name.items())\n# Example:\n info = list(person.items()) ```                 |

---

## Sets

| **Package/Method**   | **Description**                                                                                              | **Code Example**                                                                                               |
|----------------------|--------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
| **add()**            | Adds an element to a set. Duplicates are automatically removed.                                              | ```python\n set_name.add(element)\n# Example:\n fruits.add("mango") ```                                        |
| **clear()**          | Removes all elements from the set.                                                                           | ```python\n set_name.clear()\n# Example:\n fruits.clear() ```                                                  |
| **copy()**           | Creates a shallow copy of the set.                                                                           | ```python\n new_set = set_name.copy()\n# Example:\n new_fruits = fruits.copy() ```                             |
| **Defining Sets**    | A set is an unordered collection of unique elements.                                                         | ```python\n empty_set = set()\n# Example:\n fruits = {"apple", "banana", "orange"} ```                        |
| **discard()**        | Removes a specific element from the set without raising an error if the element is not found.                | ```python\n set_name.discard(element)\n# Example:\n fruits.discard("apple") ```                                |
| **issubset()**       | Checks if the current set is a subset of another set. Returns `True` if all elements of the current set are present in the other set. | ```python\n is_subset = set1.issubset(set2)\n# Example:\n is_subset = fruits.issubset(colors) ```              |
| **issuperset()**     | Checks if the current set is a superset of another set. Returns `True` if all elements of the other set are present in the current set. | ```python\n is_superset = set1.issuperset(set2)\n# Example:\n is_superset = colors.issuperset(fruits) ```      |
| **pop()**            | Removes and returns an arbitrary element from the set. Raises a `KeyError` if the set is empty.              | ```python\n removed_element = set_name.pop()\n# Example:\n removed_fruit = fruits.pop() ```                    |
| **remove()**         | Removes a specific element from the set. Raises a `KeyError` if the element is not found.                    | ```python\n set_name.remove(element)\n# Example:\n fruits.remove("banana") ```                                 |
| **Set Operations**   | Performs operations such as `union`, `intersection`, `difference`, and `symmetric difference` on sets.       | ```python\n union_set = set1.union(set2)\n intersection_set = set1.intersection(set2)\n difference_set = set1.difference(set2)\n sym_diff_set = set1.symmetric_difference(set2)\n# Example:\n combined = fruits.union(colors)\n common = fruits.intersection(colors)\n unique_to_fruits = fruits.difference(colors)\n sym_diff = fruits.symmetric_difference(colors) ``` |
| **update()**         | Adds elements from another iterable into the set.                                                           | ```python\n set_name.update(iterable)\n# Example:\n fruits.update(["kiwi", "grape"]) ```                       |

---

Â© IBM Corporation. All rights reserved.
