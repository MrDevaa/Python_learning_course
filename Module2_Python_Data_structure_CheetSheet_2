# Cheat Sheet: Python Data Structures Part-2

## Dictionaries

| **Package/Method**       | **Description**                                                                                          | **Code Example**                                                                                                 |
|--------------------------|----------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| **Creating a Dictionary** | A dictionary is a built-in data type that represents a collection of key-value pairs. Dictionaries are enclosed in curly braces `{}`. | `dict_name = {} # Creates an empty dictionary`<br>`person = { "name": "John", "age": 30, "city": "New York" }`   |
| **Accessing Values**      | You can access the values in a dictionary using their corresponding keys.                                | `value = dict_name["key_name"]`<br>`name = person["name"]`<br>`age = person["age"]`                              |
| **Add or Modify**         | Inserts a new key-value pair into the dictionary or updates an existing one if the key already exists.    | `dict_name[key] = value`<br>`person["Country"] = "USA"`<br>`person["city"] = "Chicago"`                          |
| **del**                   | Removes the specified key-value pair from the dictionary. Raises a `KeyError` if the key does not exist. | `del dict_name[key]`<br>`del person["Country"]`                                                                  |
| **update()**              | Merges the provided dictionary into the existing dictionary, adding or updating key-value pairs.         | `dict_name.update({key: value})`<br>`person.update({"Profession": "Doctor"})`                                     |
| **clear()**               | Empties the dictionary, removing all key-value pairs.                                                    | `dict_name.clear()`<br>`grades.clear()`                                                                          |
| **Key Existence**         | You can check for the existence of a key using the `in` keyword.                                         | `if "name" in person:`<br>`    print("Name exists in the dictionary.")`                                           |
| **copy()**                | Creates a shallow copy of the dictionary.                                                                | `new_dict = dict_name.copy()`<br>`new_person = person.copy()`<br>`new_person = dict(person)`                     |
| **keys()**                | Retrieves all keys from the dictionary and converts them into a list.                                    | `keys_list = list(dict_name.keys())`<br>`person_keys = list(person.keys())`                                       |
| **values()**              | Extracts all values from the dictionary and converts them into a list.                                   | `values_list = list(dict_name.values())`<br>`person_values = list(person.values())`                               |
| **items()**               | Retrieves all key-value pairs as tuples and converts them into a list of tuples.                         | `items_list = list(dict_name.items())`<br>`info = list(person.items())`                                           |

---

## Sets

| **Package/Method**       | **Description**                                                                                          | **Code Example**                                                                                                 |
|--------------------------|----------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|
| **add()**                | Adds an element to a set. Duplicates are automatically removed.                                           | `set_name.add(element)`<br>`fruits.add("mango")`                                                                 |
| **clear()**              | Removes all elements from the set.                                                                       | `set_name.clear()`<br>`fruits.clear()`                                                                           |
| **copy()**               | Creates a shallow copy of the set.                                                                       | `new_set = set_name.copy()`<br>`new_fruits = fruits.copy()`                                                      |
| **Defining Sets**        | A set is an unordered collection of unique elements.                                                     | `empty_set = set()`<br>`fruits = {"apple", "banana", "orange"}`                                                  |
| **discard()**            | Removes a specific element from the set without raising an error if the element is not found.            | `set_name.discard(element)`<br>`fruits.discard("apple")`                                                         |
| **issubset()**           | Checks if the current set is a subset of another set. Returns `True` if all elements of the current set are present in the other set. | `is_subset = set1.issubset(set2)`<br>`is_subset = fruits.issubset(colors)`                                        |
| **issuperset()**         | Checks if the current set is a superset of another set. Returns `True` if all elements of the other set are present in the current set. | `is_superset = set1.issuperset(set2)`<br>`is_superset = colors.issuperset(fruits)`                               |
| **pop()**                | Removes and returns an arbitrary element from the set. Raises a `KeyError` if the set is empty.           | `removed_element = set_name.pop()`<br>`removed_fruit = fruits.pop()`                                              |
| **remove()**             | Removes a specific element from the set. Raises a `KeyError` if the element is not found.                | `set_name.remove(element)`<br>`fruits.remove("banana")`                                                          |
| **Set Operations**       | Performs operations such as `union`, `intersection`, `difference`, and `symmetric difference` on sets.   | `union_set = set1.union(set2)`<br>`intersection_set = set1.intersection(set2)`<br>`difference_set = set1.difference(set2)`<br>`sym_diff_set = set1.symmetric_difference(set2)`<br>`combined = fruits.union(colors)`<br>`common = fruits.intersection(colors)`<br>`unique_to_fruits = fruits.difference(colors)`<br>`sym_diff = fruits.symmetric_difference(colors)` |
| **update()**             | Adds elements from another iterable into the set.                                                        | `set_name.update(iterable)`<br>`fruits.update(["kiwi", "grape"])`                                                |

---

Â© IBM Corporation. All rights reserved.
